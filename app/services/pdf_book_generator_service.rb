class PdfBookGeneratorService
    require 'prawn'
    require 'prawn/table'
    require 'fileutils'
  
    def initialize(scraping_job)
      @scraping_job = scraping_job
      
      @pdf = Prawn::Document.new(
        page_size: 'A4',
        margin: [50, 50, 50, 50],
        info: {
          Title: "Web Content Book - #{@scraping_job.base_url}",
          Author: "Generated by WebScrapService",
          Creator: "PDF Book Generator",
          CreationDate: Time.current
        }
      )

      # Set default font
      @pdf.font "Helvetica"
    end
  
    def generate
      generate_cover_page
      generate_table_of_contents
      generate_content_pages
      
      temp_file = Rails.root.join('tmp', "#{@scraping_job.id}.pdf").to_s
      @pdf.render_file(temp_file)
      temp_file
    end
  
    private
  
    def generate_cover_page
      @pdf.font("Times-Roman") { @pdf.text "Web Content Book", size: 24, align: :center }
      @pdf.move_down 20
      @pdf.text "Generated from: #{@scraping_job.base_url}", size: 16, align: :center
      @pdf.move_down 10
      @pdf.text "Generated on: #{Time.current.strftime('%B %d, %Y')}", size: 12, align: :center
      @pdf.move_down 10
      @pdf.text "Total Pages Scraped: #{@scraping_job.scraped_pages.count}", size: 12, align: :center
      
      @pdf.start_new_page
    end
  
    def generate_table_of_contents
      @pdf.font("Times-Roman") { @pdf.text "Table of Contents", size: 18, align: :center }
      @pdf.move_down 20
  
      @scraping_job.scraped_pages.order(:depth, :created_at).each_with_index do |page, index|
        next if page.status != 'completed' || page.title.blank?
        
        safe_title = page.title.to_s.encode('UTF-8', invalid: :replace, undef: :replace, replace: '?')
        @pdf.text "#{index + 1}. #{safe_title}", size: 12, align: :left
        @pdf.move_down 5
      end
  
      @pdf.start_new_page
    end
  
    def generate_content_pages
      @scraping_job.scraped_pages.order(:depth, :created_at).each do |page|
        next if page.status != 'completed'
  
        begin
          safe_title = page.title.to_s.encode('UTF-8', invalid: :replace, undef: :replace, replace: '?')
          safe_desc = page.meta_description.to_s.encode('UTF-8', invalid: :replace, undef: :replace, replace: '?')
          safe_content = page.main_content.to_s.encode('UTF-8', invalid: :replace, undef: :replace, replace: '?')
  
          # Page Title
          @pdf.font("Times-Roman") { @pdf.text safe_title, size: 16, align: :center }
          @pdf.move_down 10
  
          # Meta Description
          if page.meta_description.present?
            @pdf.text safe_desc, size: 10, align: :justify
            @pdf.move_down 15
          end
  
          # URL Reference
          @pdf.text "Source: #{page.url}", size: 8
          @pdf.text "Depth: #{page.depth}", size: 8
          @pdf.move_down 20
  
          # Main Content
          if page.main_content.present?
            @pdf.text safe_content, size: 11, align: :justify
          end
  
          # Add page links as footnotes
          if page.page_links.any?
            @pdf.move_down 20
            @pdf.font("Times-Roman") do
              @pdf.text "Related Links:", size: 8
              page.page_links.each do |link|
                safe_url = link.target_url.to_s.encode('UTF-8', invalid: :replace, undef: :replace, replace: '?')
                @pdf.text "- #{safe_url}", size: 8
              end
            end
          end
  
          @pdf.start_new_page
        rescue => e
          Rails.logger.error "Error processing page #{page.id}: #{e.message}"
          next
        end
      end
    end
  end